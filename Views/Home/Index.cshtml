@model List<SearchUser>;
@using Microsoft.AspNetCore.Mvc

@{
    ViewData["Title"] = "Home Page";
}
<div class="mt-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-6">
                <h3 class="text-secondary">จำนวนพนักงานใช้บริการร้านค้า TLM</h3>
            </div>
        
            <div class="col-6 text-end">
                @{
                    int duplicateCount = 0;

                    // ใช้ลูป foreach เพื่อเข้าถึงข้อมูลในโมเดล
                    foreach (var item1 in Model)
                    {
                        foreach (var item2 in Model)
                        {
                            // เช็คเงื่อนไขว่าวันที่และรหัสพนักต้องตรงกัน และไม่ใช่รายการเดียวกัน
                            if (item1._DateTime == item2._DateTime && item1.Code == item2.Code && item1 != item2)
                            {
                                // หากเงื่อนไขเป็นจริง ให้เพิ่มค่าตัวแปร duplicateCount
                                duplicateCount++;
                            }
                        }
                    }
                    duplicateCount = (duplicateCount / 2);
                }
                
                <button type="button" class="btn btn-outline-danger">
                    มีข้อมูลซ้ำ
                    <span class="badge text-bg-danger @((duplicateCount > 0) ? "text-danger" : "")">@duplicateCount</span>
                    คน
                </button>
            </div>
       </div> 
   </div>
<hr />
<div class="row">
    <div class="col-8">
        <form method="post" asp-controller="Home" asp-action="SearchUser" class="d-flex align-items-center needs-validation" onsubmit="return validateForm()" novalidate>
            <div class="form-group col-4 me-2">
                <label for="startDate">Select Start Date</label>
                <input type="date" class="form-control col" id="startDate" name="startDate" required>
            </div>
            <div class="form-group col-4 me-3">
                <label for="endDate">Select End Date</label>
                <input type="date" class="form-control col" id="endDate" name="endDate" required>
            </div>
            <div class="col">
                <button class="btn btn-outline-secondary" type="submit" style="width: 100px;">
                    ค้นหา
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </form>
    </div>
    <div class="col d-flex justify-content-end">
            <div class="col-auto me-1">
            <button class="btn btn-outline-secondary" onclick="loadHIP()">
                    ดึงข้อมูลจาก HIP
                </button>
            </div>
            <div class="col-auto m-0">
                <button class="btn btn-outline-success" onclick="ExportExcel()">
                    <i class="bi bi-cloud-arrow-down"></i>
                    Export Excel
                </button>
            </div>
    </div>
</div>
<div class="mt-4">
    @if (Model != null && Model.Count > 0)
    {
        <table id="myTable" class="display">
            <thead>
                <tr>
                    <th>ลำดับ</th>
                    <th>รหัสพนักงาน</th>
                    <th>ชื่อ-สกุล</th>
                    <th>แผนก</th>
                    <th>วันที่</th>
                    <th>เวลา</th>
                    <th>จำนวนครั้งสแกน</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model)
                {
                    <tr id="row-@user.No">
                        <td class="text-center">@user.No</td>
                        <td class="text-center">@user.Code</td>
                        <td>@user.Name</td>
                        <td>@user.Department</td>
                        <td>@user._DateTime</td>
                        <td>@user._Time</td>
                        <td class="text-center">@user.Total</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            ไม่พบข้อมูลพนักงาน เข้าใช้บริการ
        </div>
    }
</div>
</div>
<div class="text-center">
    <div class="spinner-grow d-none" role="status">
        <span class="visually-hidden"></span>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.css" />
<script src="https://cdn.datatables.net/2.0.8/js/dataTables.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<script>
    var js = jQuery.noConflict(true);
    js(document).ready(function () {
        var table = js('#myTable').DataTable({
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
        });
    });

    async function loadHIP() {
        var loadingSpinners = document.querySelectorAll(".spinner-grow");
        loadingSpinners.forEach(function (spinner) {
            spinner.classList.remove("d-none");
        });

        // Reduce the opacity of the element with class ".mt-5"
        document.querySelector(".mt-5").style.opacity = 0.2;

        try {
            const response = await fetch("/Home/GetDataInSert", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                },
            });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            // Remove the spinners when the response is ok
            loadingSpinners.forEach(function (spinner) {
                spinner.classList.add("d-none");
            });

            // Reset the opacity of the element with class ".mt-5"
            document.querySelector(".mt-5").style.opacity = 1;

            Swal.fire({
                title: "Download data successed",
                text: "ดึงข้อมูลจากเครื่อง HIP เสร็จแล้ว!",
                icon: "success"
            });

        } catch (error) {
            console.error("There was a problem with your fetch operation:", error);

            // Remove the spinners in case of error as well
            loadingSpinners.forEach(function (spinner) {
                spinner.classList.add("d-none");
            });

            // Reset the opacity of the element with class ".mt-5"
            document.querySelector(".mt-5").style.opacity = 1;
        }
    }

    async function ExportExcel() {
       
        modelData = [];
        
        this.modelData = [
        @foreach (var user in Model)
        {
            <text>
                    {
                        No: '@user.No',
                        Code: '@user.Code',
                        Name: '@Html.Raw(Json.Serialize(user.Name))',
                        Department: '@Html.Raw(Json.Serialize(user.Department))',
                        _DateTime: '@user._DateTime',
                        _Time: '@user._Time',
                        Total: '@user.Total'
                    },
            </text>
        }
        ];
        
       
        try {
            const response = await fetch("/Home/ExportExcel", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(modelData)
            });
            
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "DataCanteen.xlsx";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);

        } catch (error) {
            console.error("There was a problem with your fetch operation:", error);
        }
    }

    function validateForm() {
        var loadingSpinners = document.querySelectorAll(".spinner-grow");
        loadingSpinners.forEach(function (spinner) {
            spinner.classList.remove("d-none");
        });
    }


    var rows = document.querySelectorAll('tr'); // เลือกทุกแถวในตาราง

    // สร้างอาร์เรย์เพื่อเก็บรายการที่มีอยู่แล้ว
    var existingItems = [];

    // ใช้ forEach เพื่อเข้าถึงแต่ละแถว
    rows.forEach(function (row) {
        var dateCell = row.querySelector('td:nth-child(5)'); // เลือก cell ที่มีวันที่
        var codeCell = row.querySelector('td:nth-child(2)'); // เลือก cell ที่มี code

        if (dateCell && codeCell) {
            var date = dateCell.textContent.trim(); // รับข้อมูลวันที่จาก cell
            var code = codeCell.textContent.trim(); // รับข้อมูล code จาก cell

            var key = date + "-" + code;

            if (existingItems.includes(key)) { // ตรวจสอบว่า key ซ้ำหรือไม่
                row.style.backgroundColor = 'red'; // เปลี่ยนสีพื้นหลังเป็นสีแดง
            } else {
                existingItems.push(key); // เพิ่ม key ลงในอาร์เรย์
            }
        }
    });
</script>

<style>
    .btn {
        margin-top: 28px;
        height: 40px;
    }

    .btn.btn-primary {
        width: 100px;
        opacity: 0.9;
    }

    form .form-control[type="date"] {
        height: 40px;
    }

    .dt-input{
        margin-right: 5px;
    }

    .spinner-grow {
        position: absolute;
        top: 400px;
        left: 600px;
        width: 50px;
        height: 50px;
    }
</style>